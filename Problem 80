#FIRST SOLUTION IN PYTHON

import decimal

decimal.getcontext().prec = 102  # Set precision to 102 decimal places

total = 0
for n in range(1, 101):
    root = decimal.Decimal(n).sqrt()
    if int(root) ** 2 != n:  # Check if n is not a perfect square
        digits = str(root).replace('.', '')[:100]  # Extract the first 100 decimal digits
        total += sum(int(d) for d in digits)

print(total)


#SECOND SOLUTION IN C++

#include <iostream>
#include <cmath>

int main() {
    int total = 0;
    for (int n = 1; n <= 100; n++) {
        if (sqrt(n) != floor(sqrt(n))) {  // Check if n is not a perfect square
            int a = sqrt(n);  // Integer part of the square root
            int m = 0;  // Initialize the remainder to 0
            std::string digits;  // String to store the decimal digits
            for (int i = 0; i < 100; i++) {
                m = m * 100 + (n - m * m) * 10000;  // Long division
                int x = 0;
                for (int j = 1; j <= 10; j++) {
                    int y = (20 * a + j) * j;
                    if (y <= m) {
                        x = j;
                    } else {
                        break;
                    }
                }
                a = a * 10 + x;  // Append the next digit to the integer part
                m -= (20 * a - x) * x;
                digits += std::to_string(x);  // Append the next digit to the string
            }
            for (char d : digits) {
                total += d - '0';  // Sum up the decimal digits
            }
        }
    }
    std::cout << total << std::endl;
    return 0;
}
